#!/usr/bin/env node

var fs = require("fs"),
    readline = require("readline"),
    vm = require("vm"),
    commander = require("commander"),
    external = require("./external"),
    expression = require("./expression"),
    output = require("./output");

commander
    .version(require("./package.json").version)
    .usage("[options] [a-expression [b-expression]] <a-file> <b-file>")
    .option("-r, --require <module:symbol>", "require an external module", external)
    .parse(process.argv);

if (commander.args.length < 2 || commander.args.length > 4) {
  commander.outputHelp();
  process.exit(1);
} else if (commander.args.length < 4) {
  if (commander.args.length < 3) {
    commander.args.splice(0, 0, "i");
  }
  commander.args.splice(1, 0, commander.args[0]);
}

var ai = -1,
    bi = -1,
    ci = 0,
    sandbox = commander.require,
    map = new Map,
    aid = expression(commander.args[0]),
    bid = expression(commander.args[1]),
    context = new vm.createContext(sandbox);

readline.createInterface({
  input: commander.args[2] === "-" ? process.stdin : fs.createReadStream(commander.args[2]),
  output: null
}).on("line", function(line) {
  sandbox.i = ++ai;
  try {
    sandbox.d = JSON.parse(line);
  } catch (error) {
    console.error("stdin:" + (ai + 1));
    console.error(line);
    console.error("^");
    console.error("SyntaxError: " + error.message);
    process.exit(1);
  }
  var k = aid.runInContext(context);
  if (map.has(k)) map.get(k).a.push(sandbox.d);
  else map.set(k, {a: [sandbox.d], b: []});
}).on("close", function() {
  if ((ci |= 1) === 3) join();
});

readline.createInterface({
  input: commander.args[3] === "-" ? process.stdin : fs.createReadStream(commander.args[3]),
  output: null
}).on("line", function(line) {
  sandbox.i = ++bi;
  try {
    sandbox.d = JSON.parse(line);
  } catch (error) {
    console.error("stdin:" + (bi + 1));
    console.error(line);
    console.error("^");
    console.error("SyntaxError: " + error.message);
    process.exit(1);
  }
  var k = bid.runInContext(context);
  if (map.has(k)) map.get(k).b.push(sandbox.d);
  else map.set(k, {a: [], b: [sandbox.d]});
}).on("close", function() {
  if ((ci |= 2) === 3) join();
});

function join() {
  map.forEach(function(value, key) {
    value.a.forEach(function(a) {
      value.b.forEach(function(b) {
        output([a, b]);
      });
    });
  });
}
